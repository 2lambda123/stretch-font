{"version":3,"file":"stretch-font.min.js","sources":["stretch-font.js"],"sourcesContent":["/**\n * The `useStretchFont` function adjusts the font size of HTML elements based on their width and specified minimum and\n * maximum font size values.\n * @param [className=stretch-font] - The class name that identifies the elements that should have their font size\n * stretched. The default value is \"stretch-font\".\n * @param [root] - The `root` parameter is an optional argument that specifies the root element to search for nodes with\n * the class name `className`. If no `root` element is specified, the function will search the entire document for nodes\n * with the class name `className`.\n */\nfunction useStretchFont(root = document, className = 'stretch-font') {\n  const WEIGHT = [0.99, 0.99, 0.99, 0.98, 0.98, 0.92, 0.92, 0.92, 0.92]\n  const tmplClass = 'stretch-font__tmpl'\n  const store = new Map()\n\n  let resizeObserver = null\n  let tmpl = null\n\n  function createTmpl() {\n    const body = document.getElementsByTagName('body')[0]\n\n    if (!body.querySelector('.' + tmplClass)) {\n      tmpl = document.createElement('div')\n      tmpl.classList.add(tmplClass)\n      body.appendChild(tmpl)\n    }\n  }\n\n  // Helpers\n  function uniqArrayKeys(array) {\n    return [...new Set(array)]\n  }\n\n  // Mini store\n  function storeSave(node, payload = {}) {\n    if (!payload && !Object.keys(payload).length) return\n    const o = store.get(node)\n    store.set(node, { ...o, ...payload })\n  }\n  function setSize(node) {\n    if (store.get(node)?.size) return\n    const size = getFontSize(node)\n\n    storeSave(node, { size })\n  }\n  function setWeight(node) {\n    if (store.get(node)?.weight) return\n    const weight = getFontWeight(node)\n\n    storeSave(node, { weight })\n  }\n  function setMin(node) {\n    if (store.get(node)?.min) return\n    let { stretchMin: min } = node.dataset\n\n    storeSave(node, { min: +min })\n  }\n  function setMax(node) {\n    if (!('stretchMax' in node.dataset)) return\n    if (!node.dataset.stretchMax) return\n\n    if (store.get(node)?.max) return\n    let { stretchMax: max } = node.dataset\n\n    storeSave(node, { max: +max })\n  }\n  function setParams(node) {\n    const o = store.get(node)\n\n    const n = document.createElement('span')\n    n.innerHTML = node.innerHTML\n    n.style.fontSize = o.size + 'px'\n    tmpl.appendChild(n)\n\n    let { width, height } = n.getBoundingClientRect()\n    const isStretch = 'stretch' in node.dataset || 'stretchX' in node.dataset || 'stretchY' in node.dataset\n    const freeze = isStretch ? [0, 0] : !o.freeze ? [width, height] : o.freeze\n\n    storeSave(node, { width, height, freeze })\n\n    n.remove()\n  }\n\n  /**\n   * The function returns the font size of a given node element.\n   * @param node - The node parameter is a reference to a DOM element whose font size is to be retrieved.\n   * @returns The function `getFontSize` returns the computed font size of the specified `node` element.\n   */\n  function getFontSize(node) {\n    return +self.getComputedStyle(node, null).getPropertyValue('font-size').slice(0, -2)\n  }\n  function getFontWeight(node) {\n    return +self.getComputedStyle(node, null).getPropertyValue('font-weight')\n  }\n\n  /**\n   * The function calculates and sets the font size of a given node based on its size, minimum and maximum font size,\n   * width, height, and freeze properties.\n   * @param node - The HTML element node for which the font size needs to be calculated and set.\n   */\n  function formula(node) {\n    const { size, min, max, width, height, freeze, weight } = store.get(node)\n    const [fX, fY] = freeze\n    const V = WEIGHT.at(weight / 100 - 1)\n\n    const x = ((fX || node.getBoundingClientRect().width) / width) * size * V\n    const y = ((fY || node.getBoundingClientRect().height) / height) * size * V\n\n    let fz = x > max || y > max ? max : x < min || y < min ? min : x < y ? x : y\n    if ('stretchX' in node.dataset) fz = x > max ? max : x < min ? min : x\n    if ('stretchY' in node.dataset) fz = y > max ? max : y < min ? min : y\n\n    node.style.fontSize = fz + 'px'\n  }\n\n  /**\n   * The function resizes the font of entries using requestAnimationFrame.\n   * @param entries - The `entries` parameter is an array of `IntersectionObserverEntry` objects. These objects represent\n   * the elements that are being observed by an `IntersectionObserver` instance and contain information about their\n   * intersection with the viewport. In this case, the `entries` array is being passed to a function called `entries\n   */\n  function entriesResize(entries) {\n    self.requestAnimationFrame(() => entries.forEach(({ target }) => formula(target)))\n  }\n\n  /**\n   * The function finds all nodes with a specific class name within a given target element.\n   * @param target - The target parameter is a DOM element that is being searched for nodes with a specific class name.\n   * @returns The function `findNodes` returns an array of DOM elements that have a class name matching the `className`\n   * parameter. If the `target` parameter itself has the matching class name, it will be the only element in the returned\n   * array. If there are no matching elements, an empty array will be returned.\n   */\n  function getNodes(target) {\n    return target.querySelectorAll('.' + className) || []\n  }\n\n  /**\n   * The function \"rebuild\" performs various operations on a given node element, including setting its minimum and maximum\n   * size, calculating its size and width, applying a formula, and observing its resizing.\n   * @param node - The node parameter is a reference to a DOM element that needs to be rebuilt. The function rebuild() is\n   * responsible for setting various properties and attributes of the node, such as its minimum and maximum size, its size,\n   * and its width. It also calls a formula() function and sets up a resizeObserver\n   */\n  function rebuild(node) {\n    if ('stretchMin' in node.dataset) setMin(node)\n    if ('stretchMax' in node.dataset) setMax(node)\n    setSize(node)\n    setWeight(node)\n    setParams(node)\n\n    formula(node)\n    resizeObserver.observe(node)\n  }\n\n  self.addEventListener('DOMContentLoaded', () => {\n    createTmpl()\n\n    // Watch resize\n    resizeObserver = new ResizeObserver(entriesResize)\n\n    // init\n    getNodes(root).forEach(rebuild)\n\n    // Watch mutation\n    new MutationObserver(entries => {\n      const manipulate = entries\n        .filter(({ type, target }) => type === 'childList' && !target.classList?.contains(tmplClass))\n        .map(({ target }) => {\n          if (target.classList?.contains(className)) return target\n          return [...Array.from(getNodes(target)).filter(node => !store.has(node))]\n        })\n        .flat()\n\n      const mutation = entries\n        .filter(({ type, target: { parentNode } }) => {\n          if (type !== 'characterData') return\n          if (!parentNode.classList?.contains(className)) return\n          if (!store.has(parentNode)) return\n          const s = store.get(parentNode)\n          const r = parentNode.getBoundingClientRect()\n          return s.width !== r.width || s.height !== r.height\n        })\n        .map(({ target }) => target.parentNode)\n\n      uniqArrayKeys([...mutation, ...manipulate]).forEach(rebuild)\n    }).observe(root, { characterData: true, childList: true, subtree: true })\n  })\n}\n\nexport default useStretchFont\n"],"names":["root","arguments","length","undefined","document","className","WEIGHT","tmplClass","store","Map","resizeObserver","tmpl","storeSave","node","payload","Object","keys","o","get","set","_objectSpread","setSize","_store$get","size","self","getComputedStyle","getPropertyValue","slice","getFontSize","setWeight","_store$get2","weight","getFontWeight","formula","_store$get5","min","max","width","height","freeze","_freeze","_slicedToArray","fX","fY","V","at","x","getBoundingClientRect","y","fz","dataset","style","fontSize","entriesResize","entries","requestAnimationFrame","forEach","_ref","target","getNodes","querySelectorAll","rebuild","_store$get3","stretchMin","setMin","_store$get4","stretchMax","setMax","n","createElement","innerHTML","appendChild","_n$getBoundingClientR","remove","setParams","observe","addEventListener","body","getElementsByTagName","querySelector","classList","add","ResizeObserver","MutationObserver","array","manipulate","filter","_ref2","_target$classList","type","contains","map","_ref3","_target$classList2","_toConsumableArray","Array","from","has","flat","mutation","_ref4","_parentNode$classList","parentNode","s","r","_ref5","concat","Set","characterData","childList","subtree"],"mappings":"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"}