{"version":3,"file":"stretch-font.min.js","sources":["stretch-font.js"],"sourcesContent":["/**\n * The function `useStretchFont` dynamically adjusts font size based on the width of the parent element.\n * @param [className=stretch-font] - The name of the class that will be used to identify the elements that will have their\n * font size stretched. By default, it is set to \"stretch-font\".\n * @returns An object with a single method `rebuild`.\n */\nfunction useStretchFont(className = \"stretch-font\") {\n  let Nodes = [];\n\n  /**\n   * This function saves the font size of an element and sets it as the font size of its child element.\n   * @param el - The HTML element that needs to have its font size saved and set.\n   * @returns The function does not have a return statement, so it does not return anything.\n   */\n  function saveFontSize(el) {\n    if (el.firstChild.classList?.contains(className + '__save')) return\n    const n = document.createElement(\"div\");\n    n.classList.add(className + '__save');\n    n.innerHTML = el.innerText;\n    n.style.fontSize = getFontSize(el);\n    el.insertBefore(n, el.firstChild);\n    setFontSize(el);\n  }\n\n  /**\n   * The function returns the font size of an element.\n   * @param el - The parameter \"el\" is a reference to a DOM element whose font size we want to retrieve.\n   * @returns The function `getFontSize` is returning the computed font size of the element passed as an argument.\n   */\n  function getFontSize(el) {\n    return window.getComputedStyle(el, null).getPropertyValue(\"font-size\");\n  }\n\n  /**\n   * The function sets the font size of an element based on its width and optional minimum and maximum font sizes.\n   * @param el - The parameter `el` is a reference to an HTML element.\n   */\n  function setFontSize(el) {\n    const fz = getFontSize(el.firstChild).slice(0, -2);\n\n    const calc = (el.offsetWidth / el.firstChild.offsetWidth) * +fz * 0.97;\n    let { stretchMin: min, stretchMax: max } = el.dataset;\n    min !== undefined && (min = +(min || fz));\n    max !== undefined && (max = +(max || fz));\n\n    const width = calc > max ? max : calc < min ? min : calc;\n    el.style.fontSize = width + \"px\";\n  }\n\n  /**\n   * The function rebuild selects all nodes with a specific class name and saves their font size.\n   */\n  function rebuild() {\n    Nodes = document.querySelectorAll('.' + className) || [];\n    Nodes.forEach(saveFontSize);\n  }\n\n  window.addEventListener(\"DOMContentLoaded\", rebuild);\n  window.onresize = () => Nodes.forEach(setFontSize);\n\n  return {\n    rebuild\n  }\n}\n\nexport default useStretchFont;\n"],"names":["className","arguments","length","undefined","Nodes","saveFontSize","el","_el$firstChild$classL","firstChild","classList","contains","n","document","createElement","add","innerHTML","innerText","style","fontSize","getFontSize","insertBefore","setFontSize","window","getComputedStyle","getPropertyValue","fz","slice","calc","offsetWidth","_el$dataset","dataset","min","stretchMin","max","stretchMax","width","rebuild","querySelectorAll","forEach","addEventListener","onresize"],"mappings":"+CAMA,WAAoD,IAA5BA,EAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,eAC9BG,EAAQ,GAOZ,SAASC,EAAaC,GAAI,IAAAC,EACxB,GAA2BA,QAA3BA,EAAID,EAAGE,WAAWC,iBAAdF,IAAuBA,IAAvBA,EAAyBG,SAASV,EAAY,UAAlD,CACA,IAAMW,EAAIC,SAASC,cAAc,OACjCF,EAAEF,UAAUK,IAAId,EAAY,UAC5BW,EAAEI,UAAYT,EAAGU,UACjBL,EAAEM,MAAMC,SAAWC,EAAYb,GAC/BA,EAAGc,aAAaT,EAAGL,EAAGE,YACtBa,EAAYf,EANiD,CAO/D,CAOA,SAASa,EAAYb,GACnB,OAAOgB,OAAOC,iBAAiBjB,EAAI,MAAMkB,iBAAiB,YAC5D,CAMA,SAASH,EAAYf,GACnB,IAAMmB,EAAKN,EAAYb,EAAGE,YAAYkB,MAAM,GAAI,GAE1CC,EAAQrB,EAAGsB,YAActB,EAAGE,WAAWoB,aAAgBH,EAAK,IAClEI,EAA2CvB,EAAGwB,QAA5BC,EAAGF,EAAfG,WAA6BC,EAAGJ,EAAfK,gBACf/B,IAAR4B,IAAsBA,IAAQA,GAAON,SAC7BtB,IAAR8B,IAAsBA,IAAQA,GAAOR,IAErC,IAAMU,EAAQR,EAAOM,EAAMA,EAAMN,EAAOI,EAAMA,EAAMJ,EACpDrB,EAAGW,MAAMC,SAAWiB,EAAQ,IAC9B,CAKA,SAASC,KACPhC,EAAQQ,SAASyB,iBAAiB,IAAMrC,IAAc,IAChDsC,QAAQjC,EAChB,CAKA,OAHAiB,OAAOiB,iBAAiB,mBAAoBH,GAC5Cd,OAAOkB,SAAW,WAAA,OAAMpC,EAAMkC,QAAQjB,EAAY,EAE3C,CACLe,QAAAA,EAEJ"}