{"version":3,"file":"stretch-font.min.js","sources":["stretch-font.js"],"sourcesContent":["/**\n * The `useStretchFont` function adjusts the font size of HTML elements based on their width and specified minimum and\n * maximum font size values.\n * @param [className=stretch-font] - The class name that identifies the elements that should have their font size\n * stretched. The default value is \"stretch-font\".\n * @param [root] - The `root` parameter is an optional argument that specifies the root element to search for nodes with\n * the class name `className`. If no `root` element is specified, the function will search the entire document for nodes\n * with the class name `className`.\n */\nfunction useStretchFont(root = document, className = 'stretch-font') {\n  const WEIGHT = [0.99, 0.99, 0.99, 0.98, 0.98, 0.92, 0.92, 0.92, 0.92]\n  const tmplClass = 'stretch-font__tmpl'\n  const store = new Map()\n\n  let resizeObserver = null\n  let tmpl = null\n\n  // Helpers\n  function uniqArrayKeys(array) {\n    return [...new Set(array)]\n  }\n\n  // Mini store\n  function storeSave(node, payload = {}) {\n    if (!payload && !Object.keys(payload).length) return\n    const o = store.get(node)\n    store.set(node, { ...o, ...payload })\n  }\n  function setSize(node) {\n    if (store.get(node)?.size) return\n    const size = +self.getComputedStyle(node).fontSize.slice(0, -2)\n\n    storeSave(node, { size })\n  }\n  function setWeight(node) {\n    if (store.get(node)?.weight) return\n    const weight = self.getComputedStyle(node).fontWeight\n\n    storeSave(node, { weight })\n  }\n  function setMin(node) {\n    if (store.get(node)?.min) return\n    let { stretchMin: min } = node.dataset\n\n    storeSave(node, { min: +min })\n  }\n  function setMax(node) {\n    if (!('stretchMax' in node.dataset)) return\n    if (!node.dataset.stretchMax) return\n\n    if (store.get(node)?.max) return\n    let { stretchMax: max } = node.dataset\n\n    storeSave(node, { max: +max })\n  }\n  function setParams(node) {\n    const o = store.get(node)\n\n    const n = document.createElement('span')\n    n.innerHTML = node.innerHTML\n    n.style.fontSize = o.size + 'px'\n    tmpl.appendChild(n)\n\n    let { width, height } = n.getBoundingClientRect()\n    const isStretch = 'stretch' in node.dataset || 'stretchX' in node.dataset || 'stretchY' in node.dataset\n    const freeze = isStretch ? [0, 0] : !o.freeze ? [width, height] : o.freeze\n\n    storeSave(node, { width, height, freeze })\n\n    n.remove()\n  }\n\n  /**\n   * The function calculates and sets the font size of a given node based on its size, minimum and maximum font size,\n   * width, height, and freeze properties.\n   * @param node - The HTML element node for which the font size needs to be calculated and set.\n   */\n  function formula(node) {\n    const { size, min, max, width, height, freeze, weight } = store.get(node)\n    const [fX, fY] = freeze\n    const V = WEIGHT.at(weight / 100 - 1)\n\n    const X = ((fX || node.getBoundingClientRect().width) / width) * size * V\n    const Y = ((fY || node.getBoundingClientRect().height) / height) * size * V\n\n    let fz = X > max || Y > max ? max : X < min || Y < min ? min : X < Y ? X : Y\n    if ('stretchX' in node.dataset && !('stretchY' in node.dataset)) fz = X > max ? max : X < min ? min : X\n    if ('stretchY' in node.dataset && !('stretchX' in node.dataset)) fz = Y > max ? max : Y < min ? min : Y\n\n    node.style.fontSize = fz + 'px'\n  }\n\n  /**\n   * The function resizes the font of entries using requestAnimationFrame.\n   * @param entries - The `entries` parameter is an array of `IntersectionObserverEntry` objects. These objects represent\n   * the elements that are being observed by an `IntersectionObserver` instance and contain information about their\n   * intersection with the viewport. In this case, the `entries` array is being passed to a function called `entries\n   */\n  function entriesResize(entries) {\n    self.requestAnimationFrame(() => entries.forEach(({ target }) => formula(target)))\n  }\n\n  /**\n   * The function finds all nodes with a specific class name within a given target element.\n   * @param target - The target parameter is a DOM element that is being searched for nodes with a specific class name.\n   * @returns The function `findNodes` returns an array of DOM elements that have a class name matching the `className`\n   * parameter. If the `target` parameter itself has the matching class name, it will be the only element in the returned\n   * array. If there are no matching elements, an empty array will be returned.\n   */\n  function getNodes(target) {\n    return target.querySelectorAll('.' + className) || []\n  }\n\n  /**\n   * The function \"rebuild\" performs various operations on a given node element, including setting its minimum and maximum\n   * size, calculating its size and width, applying a formula, and observing its resizing.\n   * @param node - The node parameter is a reference to a DOM element that needs to be rebuilt. The function rebuild() is\n   * responsible for setting various properties and attributes of the node, such as its minimum and maximum size, its size,\n   * and its width. It also calls a formula() function and sets up a resizeObserver\n   */\n  function rebuild(node) {\n    if ('stretchMin' in node.dataset) setMin(node)\n    if ('stretchMax' in node.dataset) setMax(node)\n    setSize(node)\n    setWeight(node)\n    setParams(node)\n\n    formula(node)\n    resizeObserver.observe(node)\n  }\n\n  self.addEventListener('DOMContentLoaded', () => {\n    const body = document.getElementsByTagName('body')[0]\n\n    if (!body.querySelector('.' + tmplClass)) {\n      tmpl = document.createElement('div')\n      tmpl.classList.add(tmplClass)\n      body.appendChild(tmpl)\n    }\n\n    // Watch resize\n    resizeObserver = new ResizeObserver(entriesResize)\n\n    // init\n    getNodes(root).forEach(rebuild)\n\n    // Watch mutation\n    new MutationObserver(entries => {\n      const manipulate = entries\n        .filter(({ type, target }) => type === 'childList' && !target.classList?.contains(tmplClass))\n        .map(({ target }) => {\n          if (target.classList?.contains(className)) return target\n          return [...Array.from(getNodes(target)).filter(node => !store.has(node))]\n        })\n        .flat()\n\n      const mutation = entries\n        .filter(({ type, target: { parentNode } }) => {\n          if (type !== 'characterData') return\n          if (!parentNode.classList?.contains(className)) return\n          if (!store.has(parentNode)) return\n          const s = store.get(parentNode)\n          const r = parentNode.getBoundingClientRect()\n          return s.width !== r.width || s.height !== r.height\n        })\n        .map(({ target }) => target.parentNode)\n\n      uniqArrayKeys([...mutation, ...manipulate]).forEach(rebuild)\n    }).observe(root, { characterData: true, childList: true, subtree: true })\n  })\n}\n\nexport default useStretchFont\n"],"names":["root","arguments","length","undefined","document","className","WEIGHT","tmplClass","store","Map","resizeObserver","tmpl","storeSave","node","payload","Object","keys","o","get","set","_objectSpread","formula","_store$get5","size","min","max","width","height","freeze","weight","_freeze","_slicedToArray","fX","fY","V","at","X","getBoundingClientRect","Y","fz","dataset","style","fontSize","entriesResize","entries","self","requestAnimationFrame","forEach","_ref","target","getNodes","querySelectorAll","rebuild","_store$get3","stretchMin","setMin","_store$get4","stretchMax","setMax","_store$get","getComputedStyle","slice","setSize","_store$get2","fontWeight","setWeight","n","createElement","innerHTML","appendChild","_n$getBoundingClientR","remove","setParams","observe","addEventListener","body","getElementsByTagName","querySelector","classList","add","ResizeObserver","MutationObserver","array","manipulate","filter","_ref2","_target$classList","type","contains","map","_ref3","_target$classList2","_toConsumableArray","Array","from","has","flat","mutation","_ref4","_parentNode$classList","parentNode","s","r","_ref5","concat","Set","characterData","childList","subtree"],"mappings":"s7EASA,WAAqE,IAA7CA,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGG,SAAUC,EAASJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,eAC7CK,EAAS,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAC1DC,EAAY,qBACZC,EAAQ,IAAIC,IAEdC,EAAiB,KACjBC,EAAO,KAQX,SAASC,EAAUC,GAAoB,IAAdC,EAAOb,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAA,EACjC,GAAKa,GAAYC,OAAOC,KAAKF,GAASZ,OAAtC,CACA,IAAMe,EAAIT,EAAMU,IAAIL,GACpBL,EAAMW,IAAIN,EAAIO,EAAAA,EAAOH,CAAAA,EAAAA,GAAMH,GAFmB,CAGhD,CAkDA,SAASO,EAAQR,GACf,IAAAS,EAA0Dd,EAAMU,IAAIL,GAA5DU,EAAID,EAAJC,KAAMC,EAAGF,EAAHE,IAAKC,EAAGH,EAAHG,IAAKC,EAAKJ,EAALI,MAAOC,EAAML,EAANK,OAAQC,EAAMN,EAANM,OAAQC,EAAMP,EAANO,OAC/CC,EAAAC,EAAiBH,EAAM,GAAhBI,EAAEF,EAAA,GAAEG,EAAEH,EAAA,GACPI,EAAI5B,EAAO6B,GAAGN,EAAS,IAAM,GAE7BO,GAAMJ,GAAMnB,EAAKwB,wBAAwBX,OAASA,EAASH,EAAOW,EAClEI,GAAML,GAAMpB,EAAKwB,wBAAwBV,QAAUA,EAAUJ,EAAOW,EAEtEK,EAAKH,EAAIX,GAAOa,EAAIb,EAAMA,EAAMW,EAAIZ,GAAOc,EAAId,EAAMA,EAAMY,EAAIE,EAAIF,EAAIE,EACvE,aAAczB,EAAK2B,WAAa,aAAc3B,EAAK2B,WAAUD,EAAKH,EAAIX,EAAMA,EAAMW,EAAIZ,EAAMA,EAAMY,GAClG,aAAcvB,EAAK2B,WAAa,aAAc3B,EAAK2B,WAAUD,EAAKD,EAAIb,EAAMA,EAAMa,EAAId,EAAMA,EAAMc,GAEtGzB,EAAK4B,MAAMC,SAAWH,EAAK,IAC7B,CAQA,SAASI,EAAcC,GACrBC,KAAKC,uBAAsB,WAAA,OAAMF,EAAQG,SAAQ,SAAAC,GAAS,OAAO3B,EAAP2B,EAANC,aACtD,CASA,SAASC,EAASD,GAChB,OAAOA,EAAOE,iBAAiB,IAAM9C,IAAc,EACrD,CASA,SAAS+C,EAAQvC,GACX,eAAgBA,EAAK2B,SAjF3B,SAAgB3B,GAAM,IAAAwC,EACD,QAAnBA,EAAI7C,EAAMU,IAAIL,UAAK,IAAAwC,GAAfA,EAAiB7B,KAGrBZ,EAAUC,EAAM,CAAEW,KAFQX,EAAK2B,QAAzBc,YAGR,CA4EoCC,CAAO1C,GACrC,eAAgBA,EAAK2B,SA5E3B,SAAgB3B,GAAM,IAAA2C,EACd,eAAgB3C,EAAK2B,SACtB3B,EAAK2B,QAAQiB,aAEC,QAAnBD,EAAIhD,EAAMU,IAAIL,UAAK,IAAA2C,GAAfA,EAAiB/B,KAGrBb,EAAUC,EAAM,CAAEY,KAFQZ,EAAK2B,QAAzBiB,aAGR,CAoEoCC,CAAO7C,GA9F3C,SAAiBA,GAAM,IAAA8C,EACF,QAAnBA,EAAInD,EAAMU,IAAIL,UAAK,IAAA8C,GAAfA,EAAiBpC,MAGrBX,EAAUC,EAAM,CAAEU,MAFJsB,KAAKe,iBAAiB/C,GAAM6B,SAASmB,MAAM,GAAI,IAG/D,CA0FEC,CAAQjD,GAzFV,SAAmBA,GAAM,IAAAkD,EACJ,QAAnBA,EAAIvD,EAAMU,IAAIL,UAAK,IAAAkD,GAAfA,EAAiBlC,QAGrBjB,EAAUC,EAAM,CAAEgB,OAFHgB,KAAKe,iBAAiB/C,GAAMmD,YAG7C,CAqFEC,CAAUpD,GArEZ,SAAmBA,GACjB,IAAMI,EAAIT,EAAMU,IAAIL,GAEdqD,EAAI9D,SAAS+D,cAAc,QACjCD,EAAEE,UAAYvD,EAAKuD,UACnBF,EAAEzB,MAAMC,SAAWzB,EAAEM,KAAO,KAC5BZ,EAAK0D,YAAYH,GAEjB,IAAAI,EAAwBJ,EAAE7B,wBAApBX,EAAK4C,EAAL5C,MAAOC,EAAM2C,EAAN3C,OAIbf,EAAUC,EAAM,CAAEa,MAAAA,EAAOC,OAAAA,EAAQC,OAHf,YAAaf,EAAK2B,SAAW,aAAc3B,EAAK2B,SAAW,aAAc3B,EAAK2B,QACrE,CAAC,EAAG,GAAMvB,EAAEW,OAA2BX,EAAEW,OAApB,CAACF,EAAOC,KAIxDuC,EAAEK,QACJ,CAuDEC,CAAU3D,GAEVQ,EAAQR,GACRH,EAAe+D,QAAQ5D,EACzB,CAEAgC,KAAK6B,iBAAiB,oBAAoB,WACxC,IAAMC,EAAOvE,SAASwE,qBAAqB,QAAQ,GAE9CD,EAAKE,cAAc,IAAMtE,MAC5BI,EAAOP,SAAS+D,cAAc,QACzBW,UAAUC,IAAIxE,GACnBoE,EAAKN,YAAY1D,IAInBD,EAAiB,IAAIsE,eAAerC,GAGpCO,EAASlD,GAAM+C,QAAQK,GAGvB,IAAI6B,kBAAiB,SAAArC,GACnB,IAlImBsC,EAkIbC,EAAavC,EAChBwC,QAAO,SAAAC,GAAA,IAAAC,EAAGC,EAAIF,EAAJE,KAAMtC,EAAMoC,EAANpC,OAAM,MAAgB,cAATsC,KAAyC,QAAjBD,EAACrC,EAAO6B,iBAAPQ,IAAgBA,GAAhBA,EAAkBE,SAASjF,GAAU,IAC3FkF,KAAI,SAAAC,GAAgB,IAAAC,EAAb1C,EAAMyC,EAANzC,OACN,eAAA0C,EAAI1C,EAAO6B,iBAAS,IAAAa,GAAhBA,EAAkBH,SAASnF,GAAmB4C,EAClD2C,EAAWC,MAAMC,KAAK5C,EAASD,IAASmC,QAAO,SAAAvE,GAAI,OAAKL,EAAMuF,IAAIlF,EAAM,IAC1E,IACCmF,OAEGC,EAAWrD,EACdwC,QAAO,SAAAc,GAAsC,IAAAC,EAAnCZ,EAAIW,EAAJX,KAAgBa,EAAUF,EAApBjD,OAAUmD,WACzB,GAAa,kBAATb,GACqB,QAArBY,EAACC,EAAWtB,iBAAS,IAAAqB,GAApBA,EAAsBX,SAASnF,IAC/BG,EAAMuF,IAAIK,GAAf,CACA,IAAMC,EAAI7F,EAAMU,IAAIkF,GACdE,EAAIF,EAAW/D,wBACrB,OAAOgE,EAAE3E,QAAU4E,EAAE5E,OAAS2E,EAAE1E,SAAW2E,EAAE3E,MAHjB,CAI9B,IACC8D,KAAI,SAAAc,GAAS,OAAAA,EAANtD,OAAoBmD,eAnJXlB,KAqJNsB,OAAAZ,EAAKK,GAAQL,EAAKT,IApJjCS,EAAW,IAAIa,IAAIvB,KAoJ2BnC,QAAQK,EACtD,IAAGqB,QAAQzE,EAAM,CAAE0G,eAAe,EAAMC,WAAW,EAAMC,SAAS,GACpE,GACF"}