{"version":3,"file":"stretch-font.min.js","sources":["stretch-font.js"],"sourcesContent":["/**\n * The `useStretchFont` function adjusts the font size of HTML elements based on their width and specified minimum and\n * maximum font size values.\n * @param [className=stretch-font] - The class name that identifies the elements that should have their font size\n * stretched. The default value is \"stretch-font\".\n * @param [root] - The `root` parameter is an optional argument that specifies the root element to search for nodes with\n * the class name `className`. If no `root` element is specified, the function will search the entire document for nodes\n * with the class name `className`.\n */\nfunction useStretchFont(root = document, className = \"stretch-font\") {\n  let Nodes = [];\n  let resizeObserver = null;\n\n  /**\n   * The function saves the font size of a node and adds a child element with the same text and font size.\n   * @param node - The HTML element node that we want to save the font size for and add a new element to.\n   * @returns There is no return statement in this code snippet, so nothing is being returned.\n   */\n  function saveFontSize(node) {\n    if (!node.dataset.fz) {\n      node.dataset.fz = getFontSize(node).slice(0, -2);\n    }\n\n    if (node.firstChild.classList?.contains(className + \"__save\")) return false;\n    const n = document.createElement(\"i\");\n    n.classList.add(className + \"__save\");\n    n.innerHTML = node.innerText;\n    n.style.fontSize = node.dataset.fz + \"px\";\n    node.insertBefore(n, node.firstChild);\n\n    return true;\n  }\n\n  /**\n   * The function returns the font size of a given node element.\n   * @param node - The node parameter is a reference to a DOM element whose font size is to be retrieved.\n   * @returns The function `getFontSize` returns the computed font size of the specified `node` element.\n   */\n  function getFontSize(node) {\n    return self.getComputedStyle(node, null).getPropertyValue(\"font-size\");\n  }\n\n  /**\n   * The function adjusts the font size of a given node based on its width and specified minimum and maximum sizes.\n   * @param node - The HTML element node that needs to have its font size adjusted based on its width and the provided data\n   * attributes.\n   */\n  function formula(node) {\n    let { fz, stretchMin: min, stretchMax: max } = node.dataset;\n    min !== undefined && (min = +(min || fz));\n    max !== undefined && (max = +(max || fz));\n\n    const calc = (node.offsetWidth / node.firstChild.offsetWidth) * +fz * 0.97;\n    const size = calc > max ? max : calc < min ? min : calc;\n    node.style.fontSize = size + \"px\";\n  }\n\n  /**\n   * The function resizes the font of entries using requestAnimationFrame.\n   * @param entries - The `entries` parameter is an array of `IntersectionObserverEntry` objects. These objects represent\n   * the elements that are being observed by an `IntersectionObserver` instance and contain information about their\n   * intersection with the viewport. In this case, the `entries` array is being passed to a function called `entries\n   */\n  function entriesResize(entries) {\n    self.requestAnimationFrame(() => entries.forEach(({ target }) => formula(target)));\n  }\n\n  /**\n   * The function finds all nodes with a specific class name within a given target element.\n   * @param target - The target parameter is a DOM element that is being searched for nodes with a specific class name.\n   * @returns The function `findNodes` returns an array of DOM elements that have a class name matching the `className`\n   * parameter. If the `target` parameter itself has the matching class name, it will be the only element in the returned\n   * array. If there are no matching elements, an empty array will be returned.\n   */\n  function findNodes(target) {\n    if (target.classList?.contains(className)) return [target];\n    return target.querySelectorAll(\".\" + className) || [];\n  }\n\n  self.addEventListener(\"DOMContentLoaded\", () => {\n    Nodes = findNodes(root);\n    resizeObserver = new ResizeObserver(entriesResize);\n\n    new MutationObserver((entries) => {\n      entries.forEach(({ target }) => {\n        findNodes(target).forEach(node => {\n          if (!saveFontSize(node)) return;\n          formula(node);\n          resizeObserver.observe(node);\n        })\n      })\n    }).observe(root, { childList: true, subtree: true });\n\n    Nodes.forEach((node) => {\n      if (!saveFontSize(node)) return;\n      resizeObserver.observe(node);\n    });\n  });\n}\n\nexport default useStretchFont;\n"],"names":["root","arguments","length","undefined","document","className","Nodes","resizeObserver","saveFontSize","node","_node$firstChild$clas","dataset","fz","self","getComputedStyle","getPropertyValue","getFontSize","slice","firstChild","classList","contains","n","createElement","add","innerHTML","innerText","style","fontSize","insertBefore","formula","_node$dataset","min","stretchMin","max","stretchMax","calc","offsetWidth","size","entriesResize","entries","requestAnimationFrame","forEach","_ref","target","findNodes","_target$classList","querySelectorAll","addEventListener","ResizeObserver","MutationObserver","_ref2","observe","childList","subtree"],"mappings":"+CASA,WAAqE,IAA7CA,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGG,SAAUC,EAASJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,eAC/CK,EAAQ,GACRC,EAAiB,KAOrB,SAASC,EAAaC,GAAM,IAAAC,EAK1B,GAJKD,EAAKE,QAAQC,KAChBH,EAAKE,QAAQC,GAkBjB,SAAqBH,GACnB,OAAOI,KAAKC,iBAAiBL,EAAM,MAAMM,iBAAiB,YAC5D,CApBsBC,CAAYP,GAAMQ,MAAM,GAAI,YAGhDP,EAAID,EAAKS,WAAWC,iBAAS,IAAAT,GAAzBA,EAA2BU,SAASf,EAAY,UAAW,OAAO,EACtE,IAAMgB,EAAIjB,SAASkB,cAAc,KAMjC,OALAD,EAAEF,UAAUI,IAAIlB,EAAY,UAC5BgB,EAAEG,UAAYf,EAAKgB,UACnBJ,EAAEK,MAAMC,SAAWlB,EAAKE,QAAQC,GAAK,KACrCH,EAAKmB,aAAaP,EAAGZ,EAAKS,aAEnB,CACT,CAgBA,SAASW,EAAQpB,GACf,IAAAqB,EAA+CrB,EAAKE,QAA9CC,EAAEkB,EAAFlB,GAAgBmB,EAAGD,EAAfE,WAA6BC,EAAGH,EAAfI,gBACnB/B,IAAR4B,IAAsBA,IAAQA,GAAOnB,SAC7BT,IAAR8B,IAAsBA,IAAQA,GAAOrB,IAErC,IAAMuB,EAAQ1B,EAAK2B,YAAc3B,EAAKS,WAAWkB,aAAgBxB,EAAK,IAChEyB,EAAOF,EAAOF,EAAMA,EAAME,EAAOJ,EAAMA,EAAMI,EACnD1B,EAAKiB,MAAMC,SAAWU,EAAO,IAC/B,CAQA,SAASC,EAAcC,GACrB1B,KAAK2B,uBAAsB,WAAA,OAAMD,EAAQE,SAAQ,SAAAC,GAAS,OAAOb,EAAPa,EAANC,aACtD,CASA,SAASC,EAAUD,GAAQ,IAAAE,EACzB,OAAoB,QAApBA,EAAIF,EAAOxB,iBAAP0B,IAAgBA,GAAhBA,EAAkBzB,SAASf,GAAmB,CAACsC,GAC5CA,EAAOG,iBAAiB,IAAMzC,IAAc,EACrD,CAEAQ,KAAKkC,iBAAiB,oBAAoB,WACxCzC,EAAQsC,EAAU5C,GAClBO,EAAiB,IAAIyC,eAAeV,GAEpC,IAAIW,kBAAiB,SAACV,GACpBA,EAAQE,SAAQ,SAAAS,GACdN,EADuBM,EAANP,QACCF,SAAQ,SAAAhC,GACnBD,EAAaC,KAClBoB,EAAQpB,GACRF,EAAe4C,QAAQ1C,GACzB,GACF,GACF,IAAG0C,QAAQnD,EAAM,CAAEoD,WAAW,EAAMC,SAAS,IAE7C/C,EAAMmC,SAAQ,SAAChC,GACRD,EAAaC,IAClBF,EAAe4C,QAAQ1C,EACzB,GACF,GACF"}